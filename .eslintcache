[{"/home/am/Code/project2/zkcards/src/index.js":"1","/home/am/Code/project2/zkcards/src/App.js":"2","/home/am/Code/project2/zkcards/src/reportWebVitals.js":"3","/home/am/Code/project2/zkcards/src/MainMint.js":"4","/home/am/Code/project2/zkcards/src/NavBar.js":"5","/home/am/Code/project2/zkcards/src/zkProofs/mint/mintCallData.js":"6","/home/am/Code/project2/zkcards/src/zkProofs/exportCallData.js":"7","/home/am/Code/project2/zkcards/src/zkProofs/shield/shieldCallData.js":"8","/home/am/Code/project2/zkcards/src/zkProofs/sell/sellCallData.js":"9","/home/am/Code/project2/zkcards/src/zkProofs/unshield/unshieldCallData.js":"10","/home/am/Code/project2/zkcards/src/zkProofs/transfer/transferCallData.js":"11"},{"size":535,"mtime":1655496547052,"results":"12","hashOfConfig":"13"},{"size":389,"mtime":1656185897018,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1655496547052,"results":"15","hashOfConfig":"13"},{"size":43926,"mtime":1656855234027,"results":"16","hashOfConfig":"13"},{"size":755,"mtime":1656185832511,"results":"17","hashOfConfig":"13"},{"size":759,"mtime":1656288144724,"results":"18","hashOfConfig":"13"},{"size":1508,"mtime":1656348174358,"results":"19","hashOfConfig":"13"},{"size":675,"mtime":1656288144724,"results":"20","hashOfConfig":"13"},{"size":863,"mtime":1656765022933,"results":"21","hashOfConfig":"13"},{"size":1522,"mtime":1656288144724,"results":"22","hashOfConfig":"13"},{"size":862,"mtime":1656351854933,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qxdks2",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/am/Code/project2/zkcards/src/index.js",[],"/home/am/Code/project2/zkcards/src/App.js",[],"/home/am/Code/project2/zkcards/src/reportWebVitals.js",[],"/home/am/Code/project2/zkcards/src/MainMint.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63"],"import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport zkCards from './zkCards.json';\nimport { mintCalldata } from './zkProofs/mint/mintCallData';\nimport { shieldCalldata } from './zkProofs/shield/shieldCallData';\nimport { unshieldCalldata } from './zkProofs/unshield/unshieldCallData';\nimport { sellCalldata } from './zkProofs/sell/sellCallData';\nimport { transferCalldata } from './zkProofs/transfer/transferCallData';\nconst poseidon = require(\"circomlibjs\").poseidon;\nconst mimcsponge = require(\"circomlibjs\").mimcsponge;\nconst Tree = require(\"fixed-merkle-tree\");\n\nconst zkCardsAddress = \"0x2B14444B5BC4549E080E03a92748b00FE7287745\";\n//const zkCardsAddress = \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\nconst { BigNumber, BigNumberish } = require(\"ethers\");\n\n\nconst MERKLE_TREE_HEIGHT = 10;\n\n//const {transferCalldata} = require('./callDataFunctions.js')\n\nconst { groth16 } = require(\"snarkjs\");\nvar Web3 = require('web3');\nvar web3 = new Web3();\n/* global BigInt */\nconst MainMint = ({ accounts, setAccounts }) => {\n    //const [mintAmount, setMintAmount] = useState(1);\n    const [attribute1, setAttribute1] = useState(1);\n    const [attribute2, setAttribute2] = useState(1);\n    const [attribute3, setAttribute3] = useState(1);\n    const [hashKey, setHashKey] = useState(\"\");\n\n    const isConnected = Boolean(accounts[0]);\n\n    async function handleMint() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n                //const response = await contract.mint(BigNumber(mintAmount));\n                console.log(\"attribute1\")\n                console.log(attribute1)\n                console.log(\"attribute2\")\n                console.log(attribute2)\n                console.log(\"attribute3\")\n                console.log(attribute3)\n                console.log(\"hashKey\")\n                console.log(hashKey)\n                const callD = await mintCalldata(attribute1, attribute2, attribute3, hashKey);\n                //const callD = \"let there\";\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                const response_ = await contract.mint(...callD);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    async function handleBid() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n\n                //const response = await contract.mint(BigNumber(mintAmount));\n                const callD = await [toFixedHex(pubKey_New), toFixedHex(attribute1), toFixedHex(attribute2), toFixedHex(attribute3)];\n                //const callD = \"let there\";\n                const options = { value: ethers.utils.parseEther(number_float.toString()) }\n                console.log(options)\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                const response_ = await contract.makeBid(...callD, options);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    async function handleCancelBid() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n\n                //const response = await contract.mint(BigNumber(mintAmount));\n                const callD = await [toFixedHex(pubKey_New), toFixedHex(attribute1), toFixedHex(attribute2), toFixedHex(attribute3)];\n                //const callD = \"let there\";\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                const response_ = await contract.cancel(...callD);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    async function handleShield() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n                //const response = await contract.mint(BigNumber(mintAmount));\n                const card = {\n                    \"attribute1\": attribute1,\n                    \"attribute2\": attribute2,\n                    \"attribute3\": attribute3,\n                    \"hashKey\": hashKey\n                };\n                const hashedId = mimcsponge.multiHash([card.attribute1, card.attribute2, card.attribute3, poseidon([card.hashKey]).toString()].map((x) => BigNumber.from(x).toBigInt())).toString()\n\n                // The shielding transaction info that is needed to calculate the commitment\n                const shield = {\n                    id: hashedId,\n                    secret: secretKey\n                };\n\n                const callD = await shieldCalldata(shield.id, shield.secret);\n                //const callD = \"let there\";\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                const response_ = await contract.shield(...callD);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    async function handleUnshield() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n                const zkCards = contract;\n                async function buildMerkleTree() {\n                    console.log(zkCards.filters);\n                    const filter = zkCards.filters.NewCommitment()\n                    const events = await zkCards.queryFilter(filter, 0)\n\n                    const leaves = events.sort((a, b) => a.args.index - b.args.index).map((e) => toFixedHex(e.args.commitment))\n                    console.log(\"Leaves\")\n                    console.log(leaves)\n                    return new Tree(MERKLE_TREE_HEIGHT, leaves)\n                }\n\n                let tree = await buildMerkleTree();\n\n                // Note the data for the card we would like to locate its commitment\n                const card = {\n                    \"attribute1\": attribute1,\n                    \"attribute2\": attribute2,\n                    \"attribute3\": attribute3,\n                    \"hashKey\": hashKey\n                };\n                const hashedId = mimcsponge.multiHash([card.attribute1, card.attribute2, card.attribute3, poseidon([card.hashKey]).toString()].map((x) => BigNumber.from(x).toBigInt())).toString()\n\n                // The shielding transaction info that is needed to calculate the commitment\n                const shield = {\n                    id: hashedId,\n                    secret: secretKey\n                };\n                let pubKey = poseidon([shield.secret]).toString();\n                let commitment = poseidon([shield.id, pubKey]).toString();\n                //console.log(commitment);\n\n                // Find the index of the commitment in the Merkle tree\n                let index = tree.indexOf(toFixedHex(commitment))\n                //console.log(\"Index of commitment\")\n                //console.log(index)\n\n                const input_unshield =\n                {\n                    id: shield.id,\n                    address: address,\n                    root: tree.root(),\n                    secretKey: secretKey,\n                    pathElements: tree.path(index).pathElements.map(x => x.toString()),\n                    pathIndices: tree.path(index).pathIndices.map(x => x.toString())\n                };\n                //console.log(input_transfer)\n\n                let calData = await unshieldCalldata(input_unshield.id, input_unshield.address, input_unshield.root, input_unshield.secretKey, input_unshield.pathElements, input_unshield.pathIndices);\n                console.log(\"calData\")\n                console.log(calData)\n\n\n                // {\"id\":\"44\",\"address\":\"636\",\"root\":\"163\",\"secret\":\"3\",\"pathElements\":[\"2\",\"3\",\"3\"],\"pathIndices\":[\"0\",\"0\",\"1\"]}\n                //const callD = await unshieldCalldata(shieldId, address, root, secretKey, path_elements, path_indices);\n                const callD = calData;\n                //const callD = \"let there\";\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                console.log(\"Just before the unshield\")\n                const response_ = await contract.unshield(...callD);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    async function handleTransfer() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n                const zkCards = contract;\n                async function buildMerkleTree() {\n                    console.log(zkCards.filters);\n                    const filter = zkCards.filters.NewCommitment()\n                    const events = await zkCards.queryFilter(filter, 0)\n\n                    const leaves = events.sort((a, b) => a.args.index - b.args.index).map((e) => toFixedHex(e.args.commitment))\n                    console.log(\"Leaves\")\n                    console.log(leaves)\n                    return new Tree(MERKLE_TREE_HEIGHT, leaves)\n                }\n\n                let tree = await buildMerkleTree();\n\n                // Note the data for the card we would like to locate its commitment\n                const card = {\n                    \"attribute1\": attribute1,\n                    \"attribute2\": attribute2,\n                    \"attribute3\": attribute3,\n                    \"hashKey\": hashKey\n                };\n                const hashedId = mimcsponge.multiHash([card.attribute1, card.attribute2, card.attribute3, poseidon([card.hashKey]).toString()].map((x) => BigNumber.from(x).toBigInt())).toString()\n\n                // The shielding transaction info that is needed to calculate the commitment\n                const shield = {\n                    id: hashedId,\n                    secret: secretKey\n                };\n                let pubKey = poseidon([shield.secret]).toString();\n                let commitment = poseidon([shield.id, pubKey]).toString();\n                //console.log(commitment);\n\n                // Find the index of the commitment in the Merkle tree\n                let index = tree.indexOf(toFixedHex(commitment))\n                //console.log(\"Index of commitment\")\n                //console.log(index)\n\n                const input_transfer =\n                {\n                    id: shield.id,\n                    root: tree.root(),\n                    secret: shield.secret,\n                    pubKeyReceiver: pubKey_receiver_sell,\n                    pathElements: tree.path(index).pathElements.map(x => x.toString()),\n                    pathIndices: tree.path(index).pathIndices.map(x => x.toString())\n                };\n                //console.log(input_transfer)\n                console.log(\"PubKey receiver\")\n                console.log(input_transfer.pubKeyReceiver)\n\n                let calData = await transferCalldata(input_transfer.id, input_transfer.root, input_transfer.secret, input_transfer.pubKeyReceiver, input_transfer.pathElements, input_transfer.pathIndices)\n                console.log(calData)\n                //transferCalldata(shieldId, root, secretKey,pubKey, path_elements, path_indices)\n\n                //{\"id\":\"33\",\"root\":\"33\",\"secret\":93984,\"pubKeyReceiver\":\"2323\",\"pathElements\":[\"33\",\"44\",\"33\"],\"pathIndices\":[\"1\",\"1\",\"0\"]}\n                //const callD = await transferCalldata(shieldId, root, secretKey, pubKey, path_elements, path_indices);\n                const callD = calData;\n                //const callD = \"let there\";\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                const response_ = await contract.transfer(...callD);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    async function handlePubKey() {\n        setGeneratedPubKey(poseidon([secretKey_New]).toString());\n    }\n    async function handleSecretKeyGeneration() {\n        setValueSecretKey_New(web3.eth.abi.decodeParameter(\"uint256\", web3.utils.randomHex(32)))\n    }\n    async function handleHashKeyGeneration() {\n        // setHashKey(web3.utils.randomHex(12))\n        setHashKey(web3.eth.abi.decodeParameter(\"uint256\", web3.utils.randomHex(32)))\n    }\n    \n    async function handleSell() {\n        if (window.ethereum) {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            //const provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(\n                zkCardsAddress,\n                zkCards.abi,\n                signer\n            );\n            try {\n                const zkCards = contract;\n                async function buildMerkleTree() {\n                    console.log(zkCards.filters);\n                    const filter = zkCards.filters.NewCommitment()\n                    const events = await zkCards.queryFilter(filter, 0)\n\n                    const leaves = events.sort((a, b) => a.args.index - b.args.index).map((e) => toFixedHex(e.args.commitment))\n                    console.log(\"Leaves\")\n                    console.log(leaves)\n                    return new Tree(MERKLE_TREE_HEIGHT, leaves)\n                }\n\n                let tree = await buildMerkleTree();\n\n                // Note the data for the card we would like to locate its commitment\n                const card = {\n                    \"attribute1\": attribute1,\n                    \"attribute2\": attribute2,\n                    \"attribute3\": attribute3,\n                    \"hashKey\": hashKey\n                };\n                const hashedId = mimcsponge.multiHash([card.attribute1, card.attribute2, card.attribute3, poseidon([card.hashKey]).toString()].map((x) => BigNumber.from(x).toBigInt())).toString()\n\n                // The shielding transaction info that is needed to calculate the commitment\n                const shield = {\n                    id: hashedId,\n                    secret: secretKey\n                };\n                let pubKey = poseidon([shield.secret]).toString();\n                let commitment = poseidon([shield.id, pubKey]).toString();\n                console.log(\"secret used to generate pub\")\n                console.log(shield.secret)\n                console.log(\"Resulting pubKey\")\n                console.log(pubKey)\n                console.log(commitment);\n                function toFixedHex(number, length = 32) {\n                    let result =\n                        '0x' +\n                        (number instanceof Buffer\n                            ? number.toString('hex')\n                            : BigNumber.from(number).toHexString().replace('0x', '')\n                        ).padStart(length * 2, '0')\n                    if (result.indexOf('-') > -1) {\n                        result = '-' + result.replace('-', '')\n                    }\n                    return result\n                }\n\n\n                console.log(\"Address seller\")\n                console.log(address.toString(16))\n                console.log(toFixedHex(address, 16))\n\n                console.log(\"Pub key receiver\")\n                console.log(pubKey_receiver_sell)\n\n                console.log(\"Merkle tree\")\n                console.log(Tree.leaves)\n                // Find the index of the commitment in the Merkle tree\n                let index = tree.indexOf(toFixedHex(commitment))\n                console.log(\"Index of commitment\")\n                console.log(index)\n\n                const input_sell =\n                {\n                    address: address.toString(16),\n                    id: shield.id,\n                    root: tree.root(),\n                    secret: shield.secret,\n                    pubKeyReceiver: pubKey_receiver_sell,\n                    pathElements: tree.path(index).pathElements.map(x => x.toString()),\n                    pathIndices: tree.path(index).pathIndices.map(x => x.toString())\n                };\n                console.log(\"Address seller\")\n                console.log(input_sell.address)\n\n                let calData = await sellCalldata(input_sell.address, input_sell.id, input_sell.root, input_sell.secret, input_sell.pubKeyReceiver, input_sell.pathElements, input_sell.pathIndices, attribute1, attribute2, attribute3, hashKey)\n\n                console.log(calData)\n\n\n                //{\"id\":\",\"root\":\",\"secret\":22,\"pubKeyReceiver\":\"\"attribute1\":2,\"attribute2\":4,\"attribute3\":3,\"hashKey\":88}\n                //const callD = await sellCalldata(shieldId, root, secretKey, pubKey, path_elements, path_indices, attribute1, attribute2, attribute3, hashKey);\n                const callD = calData;\n                //const callD = \"let there\";\n                console.log(callD);\n                console.log(\"Call Data\");\n                console.log(callD);\n                const response_ = await contract.sell(...callD);\n                console.log('response:', response_);\n            } catch (err) {\n                console.log(\"error:\", err);\n            }\n        }\n    }\n    /*\n        const handleIncrement = () => {\n            if (mintAmount >= 3) return;\n            setMintAmount(mintAmount + 1);\n        };\n        const handleDecrement = () => {\n            if (mintAmount <= 1) return;\n            setMintAmount(mintAmount - 1);\n        };\n    \n               <div>\n                            <button onClick={handleDecrement}>-</button>\n                            <input type=\"number\" value={mintAmount} />\n                            <button onClick={handleIncrement}>+</button>\n                        </div>\n    */\n    const handleIncrement1 = () => {\n        if (attribute1 >= 10) return;\n        setAttribute1(attribute1 + 1);\n    };\n    const handleDecrement1 = () => {\n        if (attribute1 <= 1) return;\n        setAttribute1(attribute1 - 1);\n    };\n    const handleIncrement2 = () => {\n        if (attribute2 >= 10) return;\n        setAttribute2(attribute2 + 1);\n    };\n    const handleDecrement2 = () => {\n        if (attribute2 <= 1) return;\n        setAttribute2(attribute2 - 1);\n    };\n    const handleIncrement3 = () => {\n        if (attribute3 >= 10) return;\n        setAttribute3(attribute3 + 1);\n    };\n    const handleDecrement3 = () => {\n        if (attribute3 <= 1) return;\n        setAttribute3(attribute3 - 1);\n    };\n    const handleIncrementHash = () => {\n        if (hashKey >= 10000000000000000000000000000000000000) return;\n        setHashKey(hashKey + 1);\n    };\n    const handleDecrementHash = () => {\n        if (hashKey <= 1) return;\n        setHashKey(hashKey - 1);\n    };\n\n    // Shield logic\n\n    const [shieldId, setValueShieldId] = useState('');\n\n    const handleChangeShieldId = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setValueShieldId(result);\n    };\n\n    const [secretKey, setValueSecretKey] = useState('');\n\n    const handleChangeSecretKey = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setValueSecretKey(result);\n    }\n\n    // Unshield logic\n\n    const [address, setValueAddress] = useState('');\n    const [root, setValueRoot] = useState('')\n    const [path_elements, setValuePath_elements] = useState('');\n    const [path_indices, setValuePath_indices] = useState('');\n\n    const handleChangeAddress = event => {\n        //const result = event.target.value.replace(/\\D/g, '');\n        const result = event.target.value\n        setValueAddress(result);\n    }\n\n    const handleChangeRoot = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setValueRoot(result);\n    }\n\n    const handleChangePathElements = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setValuePath_elements(result);\n    }\n    const handleChangePathIndices = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setValuePath_indices(result);\n    }\n    // Transfer logic\n    const [pubKey, setValuePubKey] = useState('');\n    const handleChangePubKey = event => {\n        //const result = event.target.value.replace(/\\D/g, '');\n        const result = event.target.value;\n\n        setValuePubKey(result);\n    }\n    // Sell logic\n\n    const handleChangeAttribute1 = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setAttribute1(result);\n    }\n    const handleChangeAttribute2 = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setAttribute2(result);\n    }\n    const handleChangeAttribute3 = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setAttribute3(result);\n    }\n    const handleChangeHashKey = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setHashKey(result);\n    }\n    // Public Key generation logic\n    const [secretKey_New, setValueSecretKey_New] = useState('');\n    const [generated_pub_key, setGeneratedPubKey] = useState('');\n\n    const handleChangeSecretKey_New = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setValueSecretKey_New(result);\n    }\n\n    // Bid logic\n    const [pubKey_New, setPubKey_new] = useState('');\n    const [bidValue, setBidValue] = useState(0);\n\n    const handleChangePubKey_New = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n        //const result = event.target.value\n\n        setPubKey_new(result);\n    }\n    const handleChangeBidValue = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setBidValue(result);\n    }\n\n    //\n    const handleChangeHashKey_new = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n\n        setHashKey(result);\n    }\n\n    //\n\n    const [number_float, setNumber_float] = useState('')\n\n    const handleNumber = (e) => {\n\n        let input = e.target.value\n\n        if (input.match(/^([0-9]{1,})?(\\.)?([0-9]{1,})?$/))\n            setNumber_float(input)\n\n    }\n\n    const handleFloat = () => {\n\n        // The conditional prevents parseFloat(null) = NaN (when the user deletes the input)\n        setNumber_float(parseFloat(number_float) || '')\n\n    }\n\n    const [pubKey_receiver_sell, set_pubKey_receiver_sell] = useState('');\n\n\n    const handleChangePubKey_receiver_sell = event => {\n        const result = event.target.value.replace(/\\D/g, '');\n        //const result = event.target.value\n\n        set_pubKey_receiver_sell(result);\n    }\n\n    return (\n        <div>\n            <h1>ZkCards</h1>\n            <p>The world of secret magical cards</p>\n            {isConnected ? (\n                <div>\n                    <div>\n                        <h1>Generate a Secret Hash Key</h1>\n                        <p>This is the secret that proves your ownership of the zkCard</p>\n                        <button onClick={handleHashKeyGeneration}>Generate Secret Hash Key </button>\n                        <p>{hashKey}</p>\n                    </div>\n\n                    <div>\n                        <h1>Mint your zkCard</h1>\n                        <p>Select the combination of attributes that you would like to mint</p>\n                        <p>Use the button above to generate a secret hash key and then copy it to the 4th box bellow</p>\n                        <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your secret Hash Key\"\n                                value={hashKey}\n                                onChange={handleChangeHashKey_new}\n                            />\n                        </div>\n                        <button onClick={handleMint}>Mint Now</button>\n                    </div>\n\n\n                    <div>\n                        <h1>Generate a Secret Key</h1>\n                        <button onClick={handleSecretKeyGeneration}>Generate Secret Key </button>\n                        <p>{secretKey_New}</p>\n                    </div>\n\n                    <div>\n                        <h1>Create a Public Key</h1>\n                        <p>Generate a secret number using the button above and then copy/paste it bellow to generate your public key</p>\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Secret key\"\n                                value={secretKey_New}\n                                onChange={handleChangeSecretKey_New}\n                            />\n                        </div>\n\n                        <button onClick={handlePubKey}>Generate Public Key </button>\n                        <p>{generated_pub_key}</p>\n                    </div>\n\n                    <div>\n                        <h1>Make a bid to purchase a zkCard</h1>\n                        <p>Select the combination of attributes that you would like to make a bid for</p>\n                        <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your Public Key\"\n                                value={pubKey_New}\n                                onChange={handleChangePubKey_New}\n                            />\n                        </div>\n                        <div>\n                            <input placeholder='Enter bid amount' value={number_float} onChange={handleNumber} onBlur={handleFloat}\n                            />\n                        </div>\n\n                        <button onClick={handleBid}>Bid Now</button>\n                    </div>\n\n                    <div>\n                        <h1>Cancel a bid to purchase a zkCard</h1>\n                        <p>Select the combination of attributes that you would like to cancel the bid for</p>\n                        <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your Public Key\"\n                                value={pubKey_New}\n                                onChange={handleChangePubKey_New}\n                            />\n                        </div>\n                        <button onClick={handleCancelBid}>Cancel Bid Now</button>\n                    </div>\n\n\n                    <div>\n                        <h1>Shield your zkCard</h1>\n                        <p>Enter the following in order to shield your zkCard:</p>\n                        <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your secret Hash Key\"\n                                value={hashKey}\n                                onChange={handleChangeHashKey_new}\n                            />\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Secret key\"\n                                value={secretKey}\n                                onChange={handleChangeSecretKey}\n                            />\n                        </div>\n                        <button onClick={handleShield}>Shield Now</button>\n                    </div>\n\n                    <div>\n                        <h1>UnShield your zkCard</h1>\n                        <p>Enter the following in order to shield your zkCard:</p>\n                        <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your secret Hash Key\"\n                                value={hashKey}\n                                onChange={handleChangeHashKey_new}\n                            />\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Secret key\"\n                                value={secretKey}\n                                onChange={handleChangeSecretKey}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Address (current one)\"\n                                value={address}\n                                onChange={handleChangeAddress}\n                            />\n                        </div>\n\n\n                        <button onClick={handleUnshield}>UnShield Now</button>\n                    </div>\n\n                    <div>\n                        <h1>Transfer your zkCard</h1>\n                        <p>Enter the following in order to transfer your zkCard privately:</p>\n                        <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your secret Hash Key\"\n                                value={hashKey}\n                                onChange={handleChangeHashKey_new}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Secret key\"\n                                value={secretKey}\n                                onChange={handleChangeSecretKey}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Public key of receiver\"\n                                value={pubKey_receiver_sell}\n                                onChange={handleChangePubKey_receiver_sell}\n                            />\n                        </div>\n\n                        <button onClick={handleTransfer}>Transfer Now</button>\n                    </div>\n\n                    <div>\n                        <h1>Sell your zkCard</h1>\n                        <p>Enter the following in order to sell your zkCard to a public bid:</p>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Address (current one)\"\n                                value={address}\n                                onChange={handleChangeAddress}\n                            />\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Secret key\"\n                                value={secretKey}\n                                onChange={handleChangeSecretKey}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Public key of receiver\"\n                                value={pubKey_receiver_sell}\n                                onChange={handleChangePubKey_receiver_sell}\n                            />\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Attribute1\"\n                                value={attribute1}\n                                onChange={handleChangeAttribute1}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Attribute2\"\n                                value={attribute2}\n                                onChange={handleChangeAttribute2}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Attribute3\"\n                                value={attribute3}\n                                onChange={handleChangeAttribute3}\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"number\"\n                                placeholder=\"Your secret Hash Key\"\n                                value={hashKey}\n                                onChange={handleChangeHashKey_new}\n                            />\n                        </div>\n\n                        <button onClick={handleSell}>Sell Now</button>\n                    </div>\n                </div>\n            ) : (\n                <p> You must be connected</p>\n\n            )}\n        </div>\n    );\n};\nexport default MainMint;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function exportCallDataGroth16(input, wasmPath, zkeyPath) {\n\n    const { proof, publicSignals } = await groth16.fullProve(\n        input,\n        wasmPath,\n        zkeyPath\n    );\n    //console.log(\"right after fullProve\")\n    //console.log(proof);\n    //console.log(publicSignals);\n\n    const editedPublicSignals = publicSignals;//unstringifyBigInts(publicSignals);\n    const editedProof = proof;//unstringifyBigInts(proof);\n\n    //console.log(editedProof);\n\n    const calldata = await groth16.exportSolidityCallData(\n        editedProof,\n        editedPublicSignals\n    );\n    console.log(calldata);\n    console.log(calldata[0]);\n\n    const argv = calldata\n        .replace(/[\"[\\]\\s]/g, \"\")\n        .split(\",\")\n        .map((x) => BigInt(x).toString());\n\n    const a = [argv[0], argv[1]];\n    const b = [\n        [argv[2], argv[3]],\n        [argv[4], argv[5]],\n    ];\n    const c = [argv[6], argv[7]];\n    const Input = [];\n\n    for (let i = 8; i < argv.length; i++) {\n        Input.push(argv[i]);\n    }\n\n    console.log([a, b, c, Input]);\n    return [a, b, c, Input];\n}\n//const bigInt = require('big-integer');\n//const path = require(\"path\");\n\n\n//const circuitsDir = path.resolve(__dirname, \"circuits\");pubKeyReceiver\n\n\nasync function transferCalldata_(shieldId, root, secretKey, pubKey, path_elements, path_indices) {\n\n\n    const input =\n    {\n        id: shieldId,\n        root: root,\n        secret: secretKey,\n        pubKeyReceiver: pubKey,\n        pathElements: path_elements,\n        pathIndices: path_indices\n    };\n\n    //const input = { attribute1: 2, attribute2: 4, attribute3: 1, hashKey: 55};\n    let dataResult;\n\n    try {\n        dataResult = await exportCallDataGroth16(\n            input,\n            \"./public/zkProofs/transfer/transfer.wasm\",\n            \"./public/zkProofs/transfer/transfer.zkey\"\n        );\n    } catch (error) {\n        console.log(error);\n        //window.alert(\"Wrong answer\");\n    }\n\n    return dataResult;\n}\n\n\n/** BigNumber to hex string of specified length */\nfunction toFixedHex(number, length = 32) {\n    let result =\n        '0x' +\n        (number instanceof Buffer\n            ? number.toString('hex')\n            : BigNumber.from(number).toHexString().replace('0x', '')\n        ).padStart(length * 2, '0')\n    if (result.indexOf('-') > -1) {\n        result = '-' + result.replace('-', '')\n    }\n    return result\n}\n/*\nasync function buildMerkleTree(contract) {\n    const filter = contract.filters.NewCommitment()\n    const events = await contract.queryFilter(filter, 0)\n\n    const leaves = events.sort((a, b) => a.args.index - b.args.index).map((e) => toFixedHex(e.args.commitment))\n    return new Tree(MERKLE_TREE_HEIGHT, leaves)\n}*/\n\n/*                      <div>\n                            <button onClick={handleDecrement1}>-</button>\n                            <input type=\"number\" value={attribute1} />\n                            <button onClick={handleIncrement1}>+</button>\n                        </div>\n                        <div>\n\n                            <button onClick={handleDecrement2}>-</button>\n                            <input type=\"number\" value={attribute2} />\n                            <button onClick={handleIncrement2}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrement3}>-</button>\n                            <input type=\"number\" value={attribute3} />\n                            <button onClick={handleIncrement3}>+</button>\n                        </div>\n                        <div>\n                            <button onClick={handleDecrementHash}>-</button>\n                            <input type=\"number\" value={hashKey} />\n                            <button onClick={handleIncrementHash}>+</button>\n                        </div>\n                        */","/home/am/Code/project2/zkcards/src/NavBar.js",[],"/home/am/Code/project2/zkcards/src/zkProofs/mint/mintCallData.js",[],"/home/am/Code/project2/zkcards/src/zkProofs/exportCallData.js",[],"/home/am/Code/project2/zkcards/src/zkProofs/shield/shieldCallData.js",[],"/home/am/Code/project2/zkcards/src/zkProofs/sell/sellCallData.js",[],"/home/am/Code/project2/zkcards/src/zkProofs/unshield/unshieldCallData.js",[],"/home/am/Code/project2/zkcards/src/zkProofs/transfer/transferCallData.js",[],{"ruleId":"64","severity":1,"message":"65","line":15,"column":20,"nodeType":"66","messageId":"67","endLine":15,"endColumn":32},{"ruleId":"64","severity":1,"message":"68","line":472,"column":11,"nodeType":"66","messageId":"67","endLine":472,"endColumn":30},{"ruleId":"64","severity":1,"message":"69","line":476,"column":11,"nodeType":"66","messageId":"67","endLine":476,"endColumn":30},{"ruleId":"64","severity":1,"message":"70","line":483,"column":12,"nodeType":"66","messageId":"67","endLine":483,"endColumn":20},{"ruleId":"64","severity":1,"message":"71","line":485,"column":11,"nodeType":"66","messageId":"67","endLine":485,"endColumn":31},{"ruleId":"64","severity":1,"message":"72","line":502,"column":12,"nodeType":"66","messageId":"67","endLine":502,"endColumn":16},{"ruleId":"64","severity":1,"message":"73","line":503,"column":12,"nodeType":"66","messageId":"67","endLine":503,"endColumn":25},{"ruleId":"64","severity":1,"message":"74","line":504,"column":12,"nodeType":"66","messageId":"67","endLine":504,"endColumn":24},{"ruleId":"64","severity":1,"message":"75","line":512,"column":11,"nodeType":"66","messageId":"67","endLine":512,"endColumn":27},{"ruleId":"64","severity":1,"message":"76","line":518,"column":11,"nodeType":"66","messageId":"67","endLine":518,"endColumn":35},{"ruleId":"64","severity":1,"message":"77","line":523,"column":11,"nodeType":"66","messageId":"67","endLine":523,"endColumn":34},{"ruleId":"64","severity":1,"message":"78","line":529,"column":12,"nodeType":"66","messageId":"67","endLine":529,"endColumn":18},{"ruleId":"64","severity":1,"message":"79","line":530,"column":11,"nodeType":"66","messageId":"67","endLine":530,"endColumn":29},{"ruleId":"64","severity":1,"message":"80","line":553,"column":11,"nodeType":"66","messageId":"67","endLine":553,"endColumn":30},{"ruleId":"64","severity":1,"message":"81","line":570,"column":12,"nodeType":"66","messageId":"67","endLine":570,"endColumn":20},{"ruleId":"64","severity":1,"message":"82","line":578,"column":11,"nodeType":"66","messageId":"67","endLine":578,"endColumn":31},{"ruleId":"64","severity":1,"message":"83","line":1031,"column":16,"nodeType":"66","messageId":"67","endLine":1031,"endColumn":33},"no-unused-vars","'BigNumberish' is assigned a value but never used.","Identifier","unusedVar","'handleIncrementHash' is assigned a value but never used.","'handleDecrementHash' is assigned a value but never used.","'shieldId' is assigned a value but never used.","'handleChangeShieldId' is assigned a value but never used.","'root' is assigned a value but never used.","'path_elements' is assigned a value but never used.","'path_indices' is assigned a value but never used.","'handleChangeRoot' is assigned a value but never used.","'handleChangePathElements' is assigned a value but never used.","'handleChangePathIndices' is assigned a value but never used.","'pubKey' is assigned a value but never used.","'handleChangePubKey' is assigned a value but never used.","'handleChangeHashKey' is assigned a value but never used.","'bidValue' is assigned a value but never used.","'handleChangeBidValue' is assigned a value but never used.","'transferCalldata_' is defined but never used."]